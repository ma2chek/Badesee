package de.metamob.badesee.view;

import android.content.Context;
import android.graphics.Color;
import android.graphics.Typeface;
import android.util.AttributeSet;
import android.view.Gravity;
import android.view.View;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import de.metamob.badesee.R;

/**
 * @author Hans
 * 
 */
public class LinearLayoutView extends LinearLayout {

	private TextView entry;
	private Typeface custom_font;
	private ImageView arrow;
	private TextView hintDetail;
	private ImageView imageView;
	private Context context;
	private boolean initDone = false;

	private int grey_selected = 51;
	private int grey_notSelected = 255;

	public LinearLayoutView(Context context, AttributeSet attrs) {
		super(context, attrs);
		this.context = context;
	}

	/**
	 * Initialize used GUI-Elements
	 */
	private void init() {
		if (!initDone) {
			initDone = true;
			arrow = (ImageView) findViewById(R.id.ImageView_listRow_arrow);
			hintDetail = (TextView) findViewById(R.id.TextView_listRow_hintDetail);

			entry = (TextView) findViewById(R.id.TextView_listRow_entry);
			custom_font = Typeface.createFromAsset(context.getAssets(),
					"fonts/titilliumweb-extralight-webfont.ttf");
			entry.setTypeface(custom_font);
			entry.setTextSize(20);
			entry.setGravity(Gravity.CENTER_VERTICAL);

			hintDetail.setTypeface(custom_font);
			hintDetail.setTextSize(14);

			imageView = (ImageView) findViewById(R.id.ImageView_listRow_state);
		}
	}

	/**
	 * @param text
	 */
	public void setText(String text) {
		init();
		entry.setText(text);
	}

	/**
	 * @param wasserqualitaet
	 */
	public void setWasserqualitaet(String wasserqualitaet) {
		init();
		int id = getResources().getIdentifier(wasserqualitaet, "drawable",
				"de.metamob.badesee");
		imageView.setImageResource(id);
	}

	/**
	 * @param state True=Visible, False=Invisible
	 */
	public void setVisibilityState(boolean state) {
		init();
		if (state) {
			setBackgroundColor(getResources().getColor(R.color.selected_color));
			entry.setTextColor(getResources().getColor(R.color.default_color));
			refreshDrawableState();
			arrow.setVisibility(View.VISIBLE);
			hintDetail.setVisibility(View.VISIBLE);
		} else {
			setBackgroundColor(getResources().getColor(R.color.default_color));
			entry.setTextColor(getResources().getColor(R.color.selected_color));
			refreshDrawableState();
		}
	}

	/**
	 * @param visibility
	 */
	public void setStepplessVisibility(float visibility) {
		init();
		int colorBackground = (int) (visibility * grey_selected + (1f - visibility)
				* grey_notSelected);
		int colorForeground = (int) (visibility * grey_notSelected + (1f - visibility)
				* grey_selected);

		setBackgroundColor(Color.rgb(colorBackground, colorBackground,
				colorBackground));
		entry.setTextColor(Color.rgb(colorForeground, colorForeground,
				colorForeground));
	}

}
