package de.metamob.badesee.data;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.protocol.HTTP;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.os.StrictMode;
import de.metamob.badesee.model.Badestelle;

public class Json {
	public static JSONObject getJson(String url) {

		InputStream is = null;
		String result = "";
		JSONObject jsonObject = null;

		try {
			StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder()
					.permitAll().build();
			StrictMode.setThreadPolicy(policy);

			HttpClient httpclient = new DefaultHttpClient();
			HttpGet httppost = new HttpGet(url);
			HttpResponse response = httpclient.execute(httppost);
			HttpEntity entity = response.getEntity();
			is = entity.getContent();
		} catch (Exception e) {
			return null;
		}

		try {
			BufferedReader reader = new BufferedReader(new InputStreamReader(
					is, HTTP.ISO_8859_1), 8);
			StringBuilder sb = new StringBuilder();
			String line = null;
			while ((line = reader.readLine()) != null) {
				sb.append(line + "\n");
			}
			is.close();
			result = sb.toString();
		} catch (Exception e) {
			return null;
		}

		try {
			jsonObject = new JSONObject(result);
		} catch (JSONException e) {
			return null;
		}

		return jsonObject;
	}

	/**
	 * 
	 */
	public List<Badestelle> parseJSON() {
		try {
			JSONObject jObject = Json
					.getJson("http://www.metamob.de/ema/Badewasser.json");
			jObject = (jObject == null) ? new JSONObject(
					readJSON("Badewasser.json")) : jObject;
			JSONArray jsonArray = jObject.getJSONArray("index");

			for (int i = 0; i < jsonArray.length(); i++) {
				JSONObject jsonObject = jsonArray.getJSONObject(i);
				badestellen.add(new Badestelle(jsonObject.getString("id"),
						jsonObject.getString("badname"), jsonObject
								.getString("profil"), jsonObject
								.getString("bezirk"), jsonObject
								.getString("dat"), jsonObject
								.getString("sicht"), jsonObject
								.getString("ente"),
						jsonObject.getString("eco"), jsonObject
								.getString("farbe"), jsonObject
								.getString("profillink"), jsonObject
								.getString("coordinates"), jsonObject
								.getString("badestellelink")));
			}
			Collections.sort(badestellen);

		} catch (JSONException e) {
			e.printStackTrace();
		}
	}

	/**
	 * @param filename
	 * @return
	 */
	public String readJSON(String filename) {
		String json = null;
		try {
			InputStream is = getAssets().open(filename);
			int size = is.available();
			byte[] buffer = new byte[size];
			is.read(buffer);
			is.close();
			json = new String(buffer);
		} catch (IOException ex) {
			ex.printStackTrace();
			return null;
		}
		return json;
	}
}
